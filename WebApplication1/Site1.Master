<%@ Master Language="C#" AutoEventWireup="true" CodeBehind="Site1.master.cs" Inherits="WebApplication1.Site1" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
  <title>PeerConnection Demo 1</title>
<!-- Load the polyfill to switch-hit between Chrome and Firefox -->
<script src="http://webrtc.googlecode.com/svn/trunk/samples/js/base/adapter.js"></script>
       <script src="Scripts/jquery-1.6.4.js"></script>
    <script src="Scripts/jquery.signalR-1.1.0.js"></script>
   <script src="/signalr/hubs"></script>

<style>
video {
  border:5px solid black;
  width:480px;
  height:360px;
}
button {
  font: 18px sans-serif;
  padding: 8px;
}
textarea {
  font-family: monospace;
  margin: 2px;
  width:480px;
  height:640px;
}
</style>
  <asp:ContentPlaceHolder ID="head" runat="server">
    </asp:ContentPlaceHolder>
        <meta charset="utf-8" />

</head>
<body>
    <asp:Panel ID="users" runat="server" ></asp:Panel>
 <div >
 Online Users
     <div id ="olusers">
   
     </div>
 </div>

<video id="vid1" autoplay="true" muted="true"></video>
<video id="vid2" autoplay></video>
<br>

        <asp:ContentPlaceHolder ID="ContentPlaceHolder1" runat="server"></asp:ContentPlaceHolder>
<script>
       var vid1 = document.getElementById("vid1");
    var vid2 = document.getElementById("vid2");

    var chat = $.connection.chatHub;
    var myconnectionid, remoteconnectionid;

    function call_person(number) {
        remoteconnectionid = number;
        start(true);
    }
    $('span').live('click', function () {
        
        call_person($(this).attr("id"));
    });
    $.connection.hub.start().done(function () {
        console.log("signalr good to go!!");
        myconnectionid = $.connection.hub.id;
        console.log(myconnectionid);
   //     document.getElementById("connid").value = myconnectionid;
        initialize();

    });
    chat.client.broadcastMessage = function (message, sender) {
        var msg = JSON.parse(message);
        remoteconnectionid = sender;
        if (!pc && !msg.user_arrived)
            start(false);
        console.log(message + sender);
        var signal = JSON.parse(message);
        if (signal.sdp)
            pc.setRemoteDescription(new RTCSessionDescription(signal.sdp));

        else if (signal.user_arrived) {
            $('#olusers').append('<span id= '+sender+'>'
           + signal.user_arrived + '</span>');

        }
        else if (signal.user_gone) {
            alert("");
        }

        else {
            try{
                pc.addIceCandidate(new RTCIceCandidate(signal.candidate));}
            catch (e) { console.log(e);}
        }

    };


    var pc;
    var configuration = null;
    var mediaConstraints = {
        optional: [],
        mandatory: {
            OfferToReceiveAudio: true,
            OfferToReceiveVideo: true
        }
    };
    // run start(true) to initiate a call
    function start(isCaller) {
        pc = new RTCPeerConnection(configuration);
       
        // send any ice candidates to the other peer
        pc.onicecandidate = function (evt) {
           
            send(remoteconnectionid, JSON.stringify({ "candidate": evt.candidate }));
        };

        // once remote stream arrives, show it in the remote video element
        pc.onaddstream = function (evt) {
            vid2.src = URL.createObjectURL(evt.stream);
        };

        // get the local stream, show it in the local video element and send it
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

        navigator.getUserMedia({ "audio": true, "video": true }, function (stream) {
            vid1.src = URL.createObjectURL(stream);
            pc.addStream(stream);

            if (isCaller) {
                
                pc.createOffer(gotDescription);
                console.log("is a caller and created offer ");
                function gotDescription(desc) {
                    pc.setLocalDescription(desc);
                    send(remoteconnectionid, JSON.stringify({ "sdp": desc }));
                }
            }
            else {
                console.log( pc.remoteDescription);
              
                btn2.disabled = false;
                console.log("waiting you to accept and send answer");
            }

          
        });
    }
  
  
    function send(conid, msg){
        chat.server.send(conid, msg, myconnectionid);

    }
    function accept(){
        pc.createAnswer(gotDescription, null, mediaConstraints);
        btn2.disabled = true;
        function gotDescription(desc) {
            pc.setLocalDescription(desc);
            send(remoteconnectionid,JSON.stringify({ "sdp": desc }));
        }
    }
    onbeforeunload = function (e) {
        var m = JSON.stringify({"user_gone": name});
        alert(m + myconnectionid);
        chat.server.deregister(m, myconnectionid);
    }
    function initialize() {
        var name = prompt("your name");
        chat.server.register(name, "a", myconnectionid);
        
        chat.server.sendtoall(JSON.stringify({ "user_arrived": name }), myconnectionid);
    }
    function stop() {
        pc.close();
        pc = null;
        vid1.src = URL.createObjectURL(null);
        vid2.src = URL.createObjectURL(null);
    }
    
    </script>

<button id="btn2" onclick="accept()">Accept</button>
<button id="btn3" onclick="stop()">Hang Up</button>
  </body>
</html>

